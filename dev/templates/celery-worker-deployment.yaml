apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-worker"
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-worker"
  replicas: {{ .Values.celeryAsyncSharedWorker.replicas }}
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-worker"
    spec:
      containers:
        - name: worker
          image: "{{ .Values.celeryAsyncSharedWorker.image }}"
          command: [ '/bin/sh', '-c' ]
          args:
            - >
              python -m celery -A project worker
              -l {{ .Values.celeryAsyncSharedWorker.log.level}}
          imagePullPolicy: "{{ .Values.celeryAsyncSharedWorker.imagePullPolicy }}"
          envFrom:
          - configMapRef:
              name: "{{ .Release.Name }}-config"
          - secretRef:
              name:  "{{ .Release.Name }}-secrets"
          env:
            - name: MQTT_USERNAME
              value: {{ .Values.rabbitmq.auth.username }}
            - name: MQTT_PASSWORD
              value: {{ .Values.rabbitmq.auth.password }}
            - name: C_FORCE_ROOT
              value: "true"
            - name: "HEALTH_CHECK_TYPE"
              value: "redis,pg,mqtt"
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 10
            exec:
              command:
                - python
                - health_check.py
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: "{{ .Release.Name }}-worker"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{ .Release.Name }}-worker"
  minReplicas: {{ .Values.celeryAsyncSharedWorker.HPA.minReplicas }}
  maxReplicas: {{ .Values.celeryAsyncSharedWorker.HPA.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: {{ .Values.celeryAsyncSharedWorker.HPA.cpu.targetAverageUtilization }}

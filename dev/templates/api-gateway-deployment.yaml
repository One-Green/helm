apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-api"
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-api"
  replicas: {{ .Values.api.replicas }}
  template:
    metadata:
      annotations:
        release.revision: "{{ .Release.Revision }}"
      labels:
        app: "{{ .Release.Name }}-api"
    spec:
      initContainers:
        - name: initdb
          image: "{{ .Values.api.image }}"
          command: [ '/bin/bash', '-c' ]
          args: [ "python init.py" ]
          imagePullPolicy: "{{ .Values.api.imagePullPolicy }}"
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-config"
            - secretRef:
                name:  "{{ .Release.Name }}-secrets"
      containers:
        - name: api
          image: "{{ .Values.api.image }}"
          command: [ '/bin/sh', '-c' ]
          args:
            - >
              gunicorn
              --workers=1
              --bind=0.0.0.0:8080
              --access-logfile -
              --log-file -
              --log-level={{ .Values.api.log.level}}
              project.wsgi
          imagePullPolicy: "{{ .Values.api.imagePullPolicy }}"
          envFrom:
          - configMapRef:
              name: "{{ .Release.Name }}-config"
          - secretRef:
              name:  "{{ .Release.Name }}-secrets"
          env:
            - name: "HEALTH_CHECK_TYPE"
              value: "all"
          ports:
            - containerPort: 8080
              name: api
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 10
            exec:
              command:
                - python
                - health_check.py
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-api"
spec:
  selector:
    app: "{{ .Release.Name }}-api"
  ports:
    - port: 8080
  type: ClusterIP
---
  {{ if eq .Values.api.ingress.enable true }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Release.Name }}-api"
spec:
  rules:
    - host: "{{ .Values.api.ingress.host }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{ .Release.Name }}-api"
                port:
                  number: 8080
  {{ end }}

{{ if eq .Values.sprinklerController.enable "true" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-sprinklers-controller"
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-sprinklers-controller"
  serviceName: "{{ .Release.Name }}-sprinklers-controller"
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-sprinklers-controller"
      annotations:
        release.revision: "{{ .Release.Revision }}"
    spec:
      containers:
        - name: sprinklers-controller
          image: "{{ .Values.sprinklerController.image }}"
          command: [ '/bin/bash', '-c' ]
          args: [ 'cd sprinkler && python node_controller.py' ]
          imagePullPolicy: "{{ .Values.sprinklerController.imagePullPolicy }}"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_HOST
                  name: "{{ .Release.Name }}-config"
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: "{{ .Release.Name }}-config"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USER
                  name: "{{ .Release.Name }}-secrets"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: "{{ .Release.Name }}-secrets"
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_HOST
              valueFrom:
                configMapKeyRef:
                  key: MQTT_HOST
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_PORT
              valueFrom:
                configMapKeyRef:
                  key: MQTT_PORT
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_USER
              valueFrom:
                secretKeyRef:
                  key: MOSQUITTO_USERNAME
                  name: "{{ .Release.Name }}-secrets"
            - name: MQTT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MOSQUITTO_PASSWORD
                  name: "{{ .Release.Name }}-secrets"
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: REDIS_HOST
                  name: "{{ .Release.Name }}-config"
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: REDIS_PORT
                  name: "{{ .Release.Name }}-config"
            - name: "HEALTH_CHECK_TYPE"
              value: "redis,pg,mqtt"
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            exec:
              command:
                - python
                - health_check.py
  {{ end }}

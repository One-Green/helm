apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-api"
  namespace: "{{ .Release.Namespace }}"
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-api"
  replicas: {{ .Values.api.replicas }}
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-api"
    spec:
      initContainers:
        - name: initdb
          image: "{{ .Values.api.image }}"
          command: [ '/bin/bash', '-c' ]
          args: [ "python init.py" ]
          imagePullPolicy: "{{ .Values.api.imagePullPolicy }}"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_HOST
                  name: "{{ .Release.Name }}-config"
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: "{{ .Release.Name }}-config"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USER
                  name: "{{ .Release.Name }}-secrets"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: "{{ .Release.Name }}-secrets"
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_HOST
              valueFrom:
                configMapKeyRef:
                  key: MQTT_HOST
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_PORT
              valueFrom:
                configMapKeyRef:
                  key: MQTT_PORT
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_USER
              valueFrom:
                secretKeyRef:
                  key: MOSQUITTO_USERNAME
                  name: "{{ .Release.Name }}-secrets"
            - name: MQTT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MOSQUITTO_PASSWORD
                  name: "{{ .Release.Name }}-secrets"
      containers:
        - name: api
          image: "{{ .Values.api.image }}"
          command: [ '/bin/bash', '-c' ]
          args: [ 'gunicorn --workers=1 --bind=0.0.0.0:8080 --access-logfile - --log-file - --log-level={{ .Values.api.log.level}} project.wsgi' ]
          imagePullPolicy: "{{ .Values.api.imagePullPolicy }}"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_HOST
                  name: "{{ .Release.Name }}-config"
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: "{{ .Release.Name }}-config"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USER
                  name: "{{ .Release.Name }}-secrets"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: "{{ .Release.Name }}-secrets"
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_HOST
              valueFrom:
                configMapKeyRef:
                  key: MQTT_HOST
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_PORT
              valueFrom:
                configMapKeyRef:
                  key: MQTT_PORT
                  name: "{{ .Release.Name }}-config"
            - name: MQTT_USER
              valueFrom:
                secretKeyRef:
                  key: MOSQUITTO_USERNAME
                  name: "{{ .Release.Name }}-secrets"
            - name: MQTT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MOSQUITTO_PASSWORD
                  name: "{{ .Release.Name }}-secrets"
          ports:
            - containerPort: 8080
              name: api
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-api"
  namespace: "{{ .Release.Namespace }}"
spec:
  selector:
    app: "{{ .Release.Name }}-api"
  ports:
    - port: 8080
  type: ClusterIP
---
  {{ if eq .Values.api.ingress.enable "true" }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Release.Name }}-api"
  namespace: "{{ .Release.Namespace }}"
spec:
  rules:
    - host: "{{ .Values.api.ingress.host }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{ .Release.Name }}-api"
                port:
                  number: 8080
  {{ end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-tsdb"
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-tsdb"
  serviceName: "{{ .Release.Name }}-tsdb"
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-tsdb"
      annotations:
        release.revision: "{{ .Release.Revision }}"
    spec:
      containers:
        - name: timescaledb
          image: "{{ .Values.timeScaleDB.image }}"
          envFrom:
            - secretRef:
                name: "{{ .Release.Name }}-secrets"
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: "{{ .Release.Name }}-config"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: conf
              mountPath: /etc/postgresql.conf
            {{ if eq .Values.timeScaleDB.persistent.enablePersistant "true" }}
            - name: "{{ .Release.Name }}-tsdb-data"
              mountPath: /var/lib/postgresql
      {{ end }}
      volumes:
        - name: conf
          configMap:
            name: "{{ .Release.Name }}-tsdb-conf"
  {{ if eq .Values.timeScaleDB.persistent.enablePersistant "true" }}
  volumeClaimTemplates:
    - metadata:
        name: "{{ .Release.Name }}-tsdb-data"
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "{{ .Values.timeScaleDB.persistent.storageClass }}"
        resources:
          requests:
            storage: "{{ .Values.timeScaleDB.persistent.volumeRequest }}"
  {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-tsdb"
spec:
  selector:
    app: "{{ .Release.Name }}-tsdb"
  ports:
    - port: 5432
  type: ClusterIP
